//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/boundholeRouting/BoundholeRoutingPacket.msg.
//

#ifndef _BOUNDHOLEROUTINGPACKET_M_H_
#define _BOUNDHOLEROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
#include "GeoMathHelper.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/boundholeRouting/BoundholeRoutingPacket.msg:12</tt> by nedtool.
 * <pre>
 * enum BoundholePacketDef
 * {
 * 
 *     BOUNDHOLE_DATA_PACKET = 0;       // data packet
 *     BOUNDHOLE_HELLO_MSG_PACKET = 1;      // hello msg
 *     BOUNDHOLE_REP_HELLO_MSG_PACKET = 2;     // rep hello msg
 *     BOUNDHOLE_SINK_ADDRESS_PACKET = 3;    // sink address
 * }
 * </pre>
 */
enum BoundholePacketDef {
    BOUNDHOLE_DATA_PACKET = 0,
    BOUNDHOLE_HELLO_MSG_PACKET = 1,
    BOUNDHOLE_REP_HELLO_MSG_PACKET = 2,
    BOUNDHOLE_SINK_ADDRESS_PACKET = 3
};

/**
 * Class generated from <tt>src/node/communication/routing/boundholeRouting/BoundholeRoutingPacket.msg:19</tt> by nedtool.
 * <pre>
 * packet BoundholePacket extends RoutingPacket
 * {
 *     int packetId;
 *     int BoundholePacketKind @enum(BoundholePacketDef);
 *     Point destLocation;
 * 
 *     // for hello message
 *     Point helloLocation;
 * }
 * </pre>
 */
class BoundholePacket : public ::RoutingPacket
{
  protected:
    int packetId_var;
    int BoundholePacketKind_var;
    Point destLocation_var;
    Point helloLocation_var;

  private:
    void copy(const BoundholePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BoundholePacket&);

  public:
    BoundholePacket(const char *name=NULL, int kind=0);
    BoundholePacket(const BoundholePacket& other);
    virtual ~BoundholePacket();
    BoundholePacket& operator=(const BoundholePacket& other);
    virtual BoundholePacket *dup() const {return new BoundholePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getBoundholePacketKind() const;
    virtual void setBoundholePacketKind(int BoundholePacketKind);
    virtual Point& getDestLocation();
    virtual const Point& getDestLocation() const {return const_cast<BoundholePacket*>(this)->getDestLocation();}
    virtual void setDestLocation(const Point& destLocation);
    virtual Point& getHelloLocation();
    virtual const Point& getHelloLocation() const {return const_cast<BoundholePacket*>(this)->getHelloLocation();}
    virtual void setHelloLocation(const Point& helloLocation);
};

inline void doPacking(cCommBuffer *b, BoundholePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BoundholePacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _BOUNDHOLEROUTINGPACKET_M_H_

