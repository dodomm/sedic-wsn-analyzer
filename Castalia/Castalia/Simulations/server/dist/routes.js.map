{"version":3,"sources":["../src/routes.js"],"names":["routes","get","req","res","render","title","post","next","body","error","path","json"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA,MAAMA,SAAS,sBAAf;;AAEA;;;AAGAA,OAAOC,GAAP,CAAW,GAAX,EAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5BA,MAAIC,MAAJ,CAAW,OAAX,EAAoB,EAACC,OAAO,eAAR,EAApB;AACD,CAFD;;AAIA;;;;;;;;;AASAL,OAAOM,IAAP,CAAY,OAAZ,EAAqB,CAACJ,GAAD,EAAMC,GAAN,EAAWI,IAAX,KAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAKL,IAAIM,IAAT,EAAe,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAC9BP,QAAIQ,IAAJ,CAAS;AACPD,YAAMA;AADC,KAAT;AAGD,GAJD;AAKD,CAjCD;;kBAmCeV,M","file":"routes.js","sourcesContent":["import {Router} from 'express';\nimport exec from './executor/exec'\n\nconst routes = Router();\n\n/**\n * GET home page\n */\nroutes.get('/', (req, res) => {\n  res.render('index', {title: 'Express Babel'});\n});\n\n/**\n * GET /list\n *\n * This is a sample route demonstrating\n * a simple approach to error handling and testing\n * the global error handler. You most certainly want to\n * create different/better error handlers depending on\n * your use case.\n */\nroutes.post('/exec', (req, res, next) => {\n  // executor({\n  //   nodes: [\n  //     {\n  //       id: 1,\n  //       x: 0,\n  //       y: 0\n  //     },\n  //     {\n  //       id: 2,\n  //       x: 0,\n  //       y: 40\n  //     },\n  //     {\n  //       id: 3,\n  //       x: 40,\n  //       y: 40\n  //     }\n  //   ],\n  //   width: 50, height: 50,\n  //   source: 1,\n  //   destination: 3\n  // }, () => {\n  //   res.json({\n  //     path: \"1 2 3 5 6\"\n  //   })\n  // });\n\n  exec(req.body, (error, path) => {\n    res.json({\n      path: path\n    })\n  })\n});\n\nexport default routes;\n"]}