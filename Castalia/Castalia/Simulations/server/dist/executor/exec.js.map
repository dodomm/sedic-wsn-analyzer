{"version":3,"sources":["../../src/executor/exec.js"],"names":["exec","getAsync","promisify","get","multiArgs","context","count","getNextFileName","nodes","width","height","source","destination","callback","fileName","nextId","o2n","n2o","then","writer","createWriteStream","write","length","node","id","x","y","console","log","end","lines","readFileSync","toString","split","path","line","regex","match","nextNode","parseInt","push","catch","err"],"mappings":";;;;;kBAcwBA,I;;AAdxB;;;;AACA;;;;AACA;;;;;;AAEA,MAAMC,WAAW,mBAAQC,SAAR,CAAkB,kBAAIC,GAAtB,EAA2B,EAACC,WAAW,IAAZ,EAAkBC,0BAAlB,EAA3B,CAAjB;;AAEA;AACA;AACA;AACA,IAAIC,QAAQ,CAAZ;AACA,IAAIC,kBAAkB,MAAM;AAC1BD;AACA,SAAO,WAAWA,KAAX,GAAmB,MAA1B;AACD,CAHD;AAIe,SAASN,IAAT,CAAc;AACEQ,OADF,EACSC,KADT,EACgBC,MADhB;AAEEC,QAFF,EAEUC;AAFV,CAAd,EAGiBC,QAHjB,EAG2B;AACxC,oBAAIV,GAAJ,CAAS,2BAAT;AACA,MAAIW,WAAWP,iBAAf;;AAEA,MAAIQ,SAAS,CAAb;AACA,MAAIC,MAAM,EAAV;AAAA,MAAcC,MAAM,EAApB;;AAEAhB,WAAU;sBACUa,QAAS;GAD7B,EAEGI,IAFH,CAEQ,MAAM;AACZ,QAAIC,SAAS,aAAGC,iBAAH,CAAqBN,QAArB,EAA+B,EAAC,SAAS,GAAV,EAA/B,CAAb;AACAK,WAAOE,KAAP,CAAc,iBAAgBb,MAAMc,MAAO,IAA3C;AACAH,WAAOE,KAAP,CAAc,gBAAeZ,KAAM,IAAnC;AACAU,WAAOE,KAAP,CAAc,gBAAeX,MAAO,IAApC;;AAEA,SAAK,IAAIa,IAAT,IAAiBf,KAAjB,EAAwB;AACtB,YAAM,EAACgB,EAAD,EAAKC,CAAL,EAAQC,CAAR,KAAaH,IAAnB;AACAP,UAAIQ,EAAJ,IAAUT,MAAV;AACAE,UAAIF,MAAJ,IAAcS,EAAd;;AAEAL,aAAOE,KAAP,CAAc,WAAUN,MAAO,aAAYU,CAAE,IAA7C;AACAN,aAAOE,KAAP,CAAc,WAAUN,MAAO,aAAYW,CAAE,IAA7C;;AAEAX;AACD;AACDY,YAAQC,GAAR,CAAYZ,GAAZ,EAAiB,YAAjB;AACAW,YAAQC,GAAR,CAAYX,GAAZ,EAAiB,YAAjB;;AAEAE,WAAOE,KAAP,CAAc,WAAUL,IAAIL,MAAJ,CAAY,iCAApC;AACAQ,WAAOE,KAAP,CAAc,WAAUL,IAAIL,MAAJ,CAAY,yBAAwBK,IAAIJ,WAAJ,CAAiB,KAA7E;;AAEAO,WAAOU,GAAP;;AAEA,WAAO5B,SAAU;oBACDa,QAAS;KADlB,CAAP;AAGD,GA7BD,EA6BGI,IA7BH,CA6BQ,MAAM;AACZ,sBAAIf,GAAJ,CAAS,MAAKW,QAAS,WAAvB;;AAEA,QAAIgB,QAAQ,aAAGC,YAAH,CAAgB,oBAAhB,EAAsCC,QAAtC,GAAiDC,KAAjD,CAAuD,IAAvD,CAAZ;AACA,QAAIC,OAAO,CAACvB,MAAD,CAAX;;AAEA,SAAK,IAAIwB,IAAT,IAAiBL,KAAjB,EAAwB;AACtB,UAAIM,QAAQ,kBAAZ;AACA,UAAIC,QAAQD,MAAMpC,IAAN,CAAWmC,IAAX,CAAZ;;AAEA,UAAIE,KAAJ,EAAW;AACT,YAAIC,WAAWC,SAASF,MAAM,CAAN,CAAT,CAAf;AACAH,aAAKM,IAAL,CAAUvB,IAAIqB,QAAJ,CAAV;AACD;AACF;AACDzB,aAAS,IAAT,EAAeqB,IAAf;AACD,GA7CD,EA6CGO,KA7CH,CA6CSC,OAAO;AACd7B,aAAS6B,GAAT;AACD,GA/CD;AAgDD;;AAED;AACA;AACA;AACA","file":"exec.js","sourcesContent":["import fs from 'fs'\nimport cmd from 'node-cmd'\nimport Promise from 'bluebird'\n\nconst getAsync = Promise.promisify(cmd.get, {multiArgs: true, context: cmd});\n\n// let file = fs.createWriteStream('../Simulations/customSimulation/haha');\n// file.write(\"haha\\n\");\n// file.write(\"hihi\\n\");\nlet count = 0;\nlet getNextFileName = () => {\n  count++;\n  return 'config' + count + '.ini';\n};\nexport default function exec({\n                               nodes, width, height,\n                               source, destination\n                             }, callback) {\n  cmd.get(`rm -rf Castalia-Trace.txt`);\n  let fileName = getNextFileName();\n\n  let nextId = 0;\n  let o2n = {}, n2o = {};\n\n  getAsync(`\n    cp template.ini ${fileName}\n  `).then(() => {\n    let writer = fs.createWriteStream(fileName, {'flags': 'a'});\n    writer.write(`SN.numNodes = ${nodes.length}\\n`);\n    writer.write(`SN.field_x = ${width}\\n`);\n    writer.write(`SN.field_y = ${height}\\n`);\n\n    for (let node of nodes) {\n      const {id, x, y} = node;\n      o2n[id] = nextId;\n      n2o[nextId] = id;\n\n      writer.write(`SN.node[${nextId}].xCoor = ${x}\\n`);\n      writer.write(`SN.node[${nextId}].yCoor = ${y}\\n`);\n\n      nextId++;\n    }\n    console.log(o2n, \"old to new\");\n    console.log(n2o, \"new to old\");\n\n    writer.write(`SN.node[${o2n[source]}].Application.isSource = true\\n`);\n    writer.write(`SN.node[${o2n[source]}].Application.sink = \"${o2n[destination]}\"\\n`);\n\n    writer.end();\n\n    return getAsync(`\n      Castalia -i ${fileName} -c General\n    `)\n  }).then(() => {\n    cmd.get(`mv ${fileName} archive/`);\n\n    let lines = fs.readFileSync('Castalia-Trace.txt').toString().split('\\n');\n    let path = [source];\n\n    for (let line of lines) {\n      let regex = /RECEIVED (\\d+)/gi;\n      let match = regex.exec(line);\n\n      if (match) {\n        let nextNode = parseInt(match[1]);\n        path.push(n2o[nextNode]);\n      }\n    }\n    callback(null, path);\n  }).catch(err => {\n    callback(err);\n  });\n}\n\n// #SN.node[0].Application.packet_rate = 0.2\n// #SN.node[0].Application.maxData = 100\n// #SN.node[0].Application.startupDelay = 10\n// #SN.node[0].Application.nextRecipient = \"2\"\n\n\n\n\n"]}